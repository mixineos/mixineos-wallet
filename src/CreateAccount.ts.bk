const int_to_hex = (n: any) => {
    let x = new BigNumber(n);
    let user_id = x.toString(16);
    user_id = user_id.padStart(32, '0');
    var _user_id: string[] = [];
    for (var i=user_id.length-2;i>=0;i-=2) {
        _user_id.push(user_id.substr(i, 2));
    }
    user_id = _user_id.join('');
    let r = user_id.substr(0, 8) + '-' + user_id.substr(8, 4) + '-' + user_id.substr(12, 4) + '-' + user_id.substr(16, 4) + '-' + user_id.substr(20, 12);
    console.log(r);
    return r;
}


function generate_random_name(length: number) {
    var result           = [];
    var characters       = 'abcdefghijklmnopqrstuvwxyz12345';
    var charactersLength = characters.length;
    for ( var i = 0; i < length; i++ ) {
        result.push(characters.charAt(Math.floor(Math.random() * 
        charactersLength)));
    }
    return result.join('');
}

const generate_account_name = async () => {
    for (var i=0;i<10;i++) {
        let name = 'mix' + generate_random_name(9);
        console.log(name);
        try {
            await jsonRpc.get_account(name);
        } catch(e) {
            return name;
        }
    }
    throw Error("generate account name failed!");
}

const _create_account = async (user_id: string) => {
    canceled = false;

    let [threshold, signers] = await request_signers();
    const receivers = signers.map((x:any) => x.client_id);
    const new_account = await generate_account_name();
    console.log("++++++create_account:", new_account);
    const asset_id = "965e5c6e-434c-3fa9-b780-c50f43cd955c";
    const trace_id = v4();
    const amount = 0.15;
    //Number.parseFloat(amount)
    const str_amount = amount.toFixed(4);
    // const memo = `createacc|${user_id}|${account}`;

    const _user_id = '0x' + replaceAll(user_id, "-", "");

    // signatures: string[];
    // compression?: number;
    // serializedTransaction: Uint8Array;
    // serializedContextFreeData?: Uint8Array;
    let transaction = await api.transact(
        {
          actions: [
            {
                account: "mixincrossss",
                name: "createacc",
                authorization: [
                    {
                        actor: "mixincrossss",
                        permission: "active"
                    }
                ],
                data: {
                   new_account_name: new_account,
                   user_id: _user_id,
                   paid: `${str_amount} EOS`
                }
            }
          ]
        },
        {
            broadcast: false,
            sign: false,
            blocksBehind: 3,
            expireSeconds: 60*60
        }
    );
    console.log("++++transaction:", transaction);
    const trx = api.deserializeTransaction(transaction.serializedTransaction);
    console.log("++++trx:", trx);
    
    // transaction.serializedTransaction = toHexString(transaction.serializedTransaction);

    const memo = `createacc|${user_id}|${trace_id}|${new_account}|${amount}|${trx.expiration}|${trx.ref_block_num}|${trx.ref_block_prefix}`

    // TODO get create account fee
    let payment = await request_payment(str_amount, trace_id, receivers, memo, asset_id);

    window.open(`mixin://codes/${payment.code_id}`, "_blank");
    
    let paid = false;
    for (var i=0;i<30;i++) {
        payment = await request_payment("1.0", trace_id, receivers, memo, asset_id);
        if (payment.status == 'paid') {
            paid = true;
            break;
        }
        await delay(2000);
    }

    if (!paid) {
        throw Error('create account payment timeout');
    }

    const signatures = await request_signatures(1, signers, threshold, user_id, trace_id, transaction, trx, payment);
    console.log(signatures);

    // signatures: string[];
    // compression?: number;
    // serializedTransaction: Uint8Array;
    // serializedContextFreeData?: Uint8Array;
    
    // { signatures, compression = 0, serializedTransaction, serializedContextFreeData }

    const r2 = await jsonRpc.push_transaction({
        signatures: signatures as string[],
        compression: transaction.compression,
        serializedTransaction: transaction.serializedTransaction,
        serializedContextFreeData: transaction.serializedContextFreeData
    });
    console.log(r2);
    for (var i=0;i<30;i++) {
        let _user_id = replaceAll(user_id, '-', '');
        let user_id_dec = binaryToDecimal(fromHexString(_user_id))
    //    user_id = '0x' + _user_id.join('');
        var params = {
            json: true,
            code: 'mixincrossss',
            scope: 'mixincrossss',
            table: 'bindaccounts',
            lower_bound: user_id_dec,
            upper_bound: user_id_dec,
            limit: 1,
            key_type: 'i128',
            index_position: '2',
            reverse :  false,
            show_payer :  false
        }
        var r = await jsonRpc.get_table_rows(params);
        console.log(r);
        if (r.rows.length != 0) {
            window.location.reload();
            return;
        }
        await delay(2000);
    }
    throw Error("account creation timeout!");
}

const create_account = (user_id: string) => {
    canceled = false;
    return new Promise((resolve, reject) => {
        swal({
            text: '正在检查支付结果...',
            closeOnClickOutside: false,
            button: {
                text: "取消",
                closeModal: false,
            },
            icon:'https://mixin-www.zeromesh.net/assets/fb6f3c230cb846e25247dfaa1da94d8f.gif'
        } as any).then((value) => {
            canceled = true;
            reject(value);
            swal.close();
        });

        _create_account(user_id).then(r => {
            resolve(r);
        }).catch(e => {
            reject(e);
        });
    });
}